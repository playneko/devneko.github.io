{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nvar globalData = null;\nvar globalPage = 0;\nlet nextPageNum = 1;\nexport default function MainPagingListModel() {\n  _s();\n\n  // console.log(listData);\n  // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n  const [fetching, setFetching] = useState(false); // 리스트 데이터 저장\n\n  const [jsonData, jsonDataSet] = useState([]); // 다음 페이지 데이터를 저장\n  // const [getPaging, setPaging] = useState<IPagingData>({ next: undefined });\n  // 메인 리스트 취득\n\n  const mainFetchData = async () => {\n    try {\n      const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=' + globalPage);\n\n      if (response.data != null) {\n        globalData = response.data.list;\n        globalPage = globalData.length + nextPageNum;\n        jsonDataSet(response.data.list);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }; // 추가 리스트 취득\n\n\n  const moreFetchData = async () => {\n    // 추가 데이터를 로드하는 상태로 전환\n    setFetching(true);\n\n    try {\n      const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=' + globalPage);\n\n      if (response.data != null) {\n        // 추가 데이터 부분\n        const fetchedData = response.data.list; // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다. \n\n        const mergedData = globalData.concat(...fetchedData);\n        globalData = mergedData;\n        globalPage = fetchedData.length + nextPageNum;\n        console.log(mergedData);\n        jsonDataSet(mergedData);\n      }\n    } catch (e) {\n      console.log(e);\n    } // 추가 데이터 로드 끝\n\n\n    setFetching(false);\n  }; // 스크롤 이벤트 핸들러\n\n\n  const handleScroll = () => {\n    const scrollHeight = document.documentElement.scrollHeight;\n    const scrollTop = document.documentElement.scrollTop;\n    const clientHeight = document.documentElement.clientHeight;\n\n    if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n      // 페이지 끝에 도달하면 추가 데이터를 받아온다\n      moreFetchData();\n    }\n  };\n\n  useEffect(() => {\n    // 메인 리스트 가져오기\n    mainFetchData(); // scroll event listener 등록\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      // scroll event listener 해제\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  return jsonData;\n}\n\n_s(MainPagingListModel, \"LlLPxeVXTXyC8RiOHP6Wpyv42lc=\");\n\n_c = MainPagingListModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPagingListModel\");","map":{"version":3,"sources":["/Volumes/BackupHDD/work/react/playneko-react/src/model/MainPagingListModel.js"],"names":["useState","useEffect","axios","globalData","globalPage","nextPageNum","MainPagingListModel","fetching","setFetching","jsonData","jsonDataSet","mainFetchData","response","get","data","list","length","e","console","log","moreFetchData","fetchedData","mergedData","concat","handleScroll","scrollHeight","document","documentElement","scrollTop","clientHeight","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,WAAW,GAAG,CAAlB;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAAA;;AAC1C;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC,CAH0C,CAI1C;;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC,CAL0C,CAM1C;AACA;AAEA;;AACA,QAAMW,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,6DAA6DT,UAAvE,CAAvB;;AACA,UAAIQ,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvBX,QAAAA,UAAU,GAAGS,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AACAX,QAAAA,UAAU,GAAGD,UAAU,CAACa,MAAX,GAAoBX,WAAjC;AACAK,QAAAA,WAAW,CAACE,QAAQ,CAACE,IAAT,CAAcC,IAAf,CAAX;AACH;AACJ,KAPD,CAOE,OAAME,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,GAXD,CAV0C,CAuB1C;;;AACA,QAAMG,aAAa,GAAG,YAAY;AAC9B;AACAZ,IAAAA,WAAW,CAAC,IAAD,CAAX;;AAEA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,6DAA6DT,UAAvE,CAAvB;;AACA,UAAIQ,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvB;AACA,cAAMO,WAAW,GAAGT,QAAQ,CAACE,IAAT,CAAcC,IAAlC,CAFuB,CAGvB;;AACA,cAAMO,UAAU,GAAGnB,UAAU,CAACoB,MAAX,CAAkB,GAAGF,WAArB,CAAnB;AACAlB,QAAAA,UAAU,GAAGmB,UAAb;AACAlB,QAAAA,UAAU,GAAGiB,WAAW,CAACL,MAAZ,GAAqBX,WAAlC;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACAZ,QAAAA,WAAW,CAACY,UAAD,CAAX;AACH;AACJ,KAZD,CAYE,OAAML,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,KAlB6B,CAoB9B;;;AACAT,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAtBD,CAxB0C,CAgD1C;;;AACA,QAAMgB,YAAY,GAAG,MAAM;AACvB,UAAMC,YAAY,GAAGC,QAAQ,CAACC,eAAT,CAAyBF,YAA9C;AACA,UAAMG,SAAS,GAAGF,QAAQ,CAACC,eAAT,CAAyBC,SAA3C;AACA,UAAMC,YAAY,GAAGH,QAAQ,CAACC,eAAT,CAAyBE,YAA9C;;AACA,QAAID,SAAS,GAAGC,YAAZ,IAA4BJ,YAA5B,IAA4ClB,QAAQ,KAAK,KAA7D,EAAoE;AAChE;AACAa,MAAAA,aAAa;AAChB;AACJ,GARD;;AAUAnB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAU,IAAAA,aAAa,GAFD,CAGZ;;AACAmB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAM;AACT;AACAM,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC;AACH,KAHD;AAIH,GATQ,EASN,EATM,CAAT;AAWA,SAAOf,QAAP;AACH;;GAvEuBH,mB;;KAAAA,mB","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios'\n\nvar globalData = null;\nvar globalPage = 0;\nlet nextPageNum = 1;\n\nexport default function MainPagingListModel() {\n    // console.log(listData);\n    // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n    const [fetching, setFetching] = useState(false);\n    // 리스트 데이터 저장\n    const [jsonData, jsonDataSet] = useState([]);\n    // 다음 페이지 데이터를 저장\n    // const [getPaging, setPaging] = useState<IPagingData>({ next: undefined });\n\n    // 메인 리스트 취득\n    const mainFetchData = async () => {\n        try {\n            const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=' + globalPage);\n            if (response.data != null) {\n                globalData = response.data.list;\n                globalPage = globalData.length + nextPageNum;\n                jsonDataSet(response.data.list);\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    // 추가 리스트 취득\n    const moreFetchData = async () => {\n        // 추가 데이터를 로드하는 상태로 전환\n        setFetching(true);\n\n        try {\n            const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=' + globalPage);\n            if (response.data != null) {\n                // 추가 데이터 부분\n                const fetchedData = response.data.list;\n                // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다. \n                const mergedData = globalData.concat(...fetchedData);\n                globalData = mergedData;\n                globalPage = fetchedData.length + nextPageNum;\n                console.log(mergedData);\n                jsonDataSet(mergedData);\n            }\n        } catch(e) {\n            console.log(e);\n        }\n\n        // 추가 데이터 로드 끝\n        setFetching(false);\n    }\n\n    // 스크롤 이벤트 핸들러\n    const handleScroll = () => {\n        const scrollHeight = document.documentElement.scrollHeight;\n        const scrollTop = document.documentElement.scrollTop;\n        const clientHeight = document.documentElement.clientHeight;\n        if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n            // 페이지 끝에 도달하면 추가 데이터를 받아온다\n            moreFetchData();\n        }\n    };\n\n    useEffect(() => {\n        // 메인 리스트 가져오기\n        mainFetchData();\n        // scroll event listener 등록\n        window.addEventListener(\"scroll\", handleScroll);\n        return () => {\n            // scroll event listener 해제\n            window.removeEventListener(\"scroll\", handleScroll);\n        };\n    }, []);\n\n    return jsonData;\n}\n"]},"metadata":{},"sourceType":"module"}