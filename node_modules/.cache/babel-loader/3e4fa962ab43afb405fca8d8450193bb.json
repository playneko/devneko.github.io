{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/BackupHDD/work/react/playneko-react/src/component/Detail.js\";\nimport React from 'react';\nimport gfm from 'remark-gfm';\nimport ReactMarkdown from 'react-markdown';\nimport htmlParser from 'react-markdown/plugins/html-parser';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport DetailModel from \"../model/DetailModel\";\n\nfunction InlineCodeBlock(props) {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      background: '#ff0'\n    },\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_c = InlineCodeBlock;\n\nfunction BlockQuoteBlock(props) {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      border: '1px dashed #aaa',\n      borderRadius: 10,\n      padding: 10,\n      margin: 5\n    },\n    children: props.children.node\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = BlockQuoteBlock;\n\nfunction TableCellBlock(props) {\n  let style = {\n    textAlign: props.align ? props.align : 'center',\n    padding: 5\n  };\n\n  if (props.isHeader) {\n    style.background = '#ff0';\n    style.border = '1px solid #ccc';\n    style.boderLeft = 0;\n    style.borderRight = 0;\n  } else {\n    style.borderBottom = '1px solid #eee';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    style: style,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = TableCellBlock;\nconst parseHtml = htmlParser({\n  processingInstructions: [{\n    shouldProcessNode: node => node && node.name === 'span',\n    processNode: () => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: '#f00'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 28\n    }, this)\n  }]\n});\nexport default function Detail(props) {\n  // 상세 내용 취득\n  const getDetailData = DetailModel(props.match.params.id);\n  const detailData = getDetailData[0];\n  console.log(detailData);\n  var markdown = \"\";\n  const renderers = {\n    tableCell: TableCellBlock,\n    inlineCode: InlineCodeBlock,\n    blockquote: BlockQuoteBlock,\n    code: ({\n      language,\n      value\n    }) => {\n      return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: okaidia,\n        language: language,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  if (detailData) {\n    markdown = detailData.board_article;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      plugins: [gfm],\n      skipHtml: false,\n      escapeHtml: false,\n      astPlugins: [parseHtml],\n      renderers: renderers,\n      children: markdown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c4 = Detail;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InlineCodeBlock\");\n$RefreshReg$(_c2, \"BlockQuoteBlock\");\n$RefreshReg$(_c3, \"TableCellBlock\");\n$RefreshReg$(_c4, \"Detail\");","map":{"version":3,"sources":["/Volumes/BackupHDD/work/react/playneko-react/src/component/Detail.js"],"names":["React","gfm","ReactMarkdown","htmlParser","Prism","SyntaxHighlighter","okaidia","DetailModel","InlineCodeBlock","props","background","value","BlockQuoteBlock","border","borderRadius","padding","margin","children","node","TableCellBlock","style","textAlign","align","isHeader","boderLeft","borderRight","borderBottom","parseHtml","processingInstructions","shouldProcessNode","name","processNode","color","Detail","getDetailData","match","params","id","detailData","console","log","markdown","renderers","tableCell","inlineCode","blockquote","code","language","board_article"],"mappings":"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","sourcesContent":["import React from 'react';\nimport gfm from 'remark-gfm'\nimport ReactMarkdown from 'react-markdown'\nimport htmlParser from 'react-markdown/plugins/html-parser'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {okaidia} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nimport DetailModel from \"../model/DetailModel\";\n\nfunction InlineCodeBlock(props) {\n  return (\n    <span style={{background: '#ff0'}}>\n      {props.value}\n    </span>\n  );\n}\n\nfunction BlockQuoteBlock(props) {\n  return (\n    <span style={{border: '1px dashed #aaa', borderRadius: 10, padding: 10, margin: 5}}>\n      {props.children.node}\n    </span>\n  );\n}\n\nfunction TableCellBlock(props) {\n  let style = {\n    textAlign: props.align ? props.align : 'center',\n    padding: 5\n  };\n\n  if (props.isHeader) {\n    style.background = '#ff0';\n    style.border = '1px solid #ccc';\n    style.boderLeft = 0;\n    style.borderRight = 0;\n  } else {\n    style.borderBottom = '1px solid #eee';\n  }\n\n  return (\n    <td style={style}>\n      {props.children}\n    </td>\n  );\n}\n\nconst parseHtml = htmlParser({\n    processingInstructions: [{\n        shouldProcessNode: (node) => node && node.name === 'span',\n        processNode: () => <span style={{color: '#f00'}}/>\n    }]\n});\n\nexport default function Detail(props) {\n    // 상세 내용 취득\n    const getDetailData = DetailModel(props.match.params.id);\n    const detailData = getDetailData[0];\n    console.log(detailData);\n    var markdown = \"\";\n\n    const renderers = {\n        tableCell: TableCellBlock,\n        inlineCode: InlineCodeBlock,\n        blockquote: BlockQuoteBlock,\n        code: ({language, value}) => {\n            return <SyntaxHighlighter style={okaidia} language={language} children={value} />\n        },\n    }\n\n    if (detailData) {\n        markdown = detailData.board_article;\n    }\n\n    return (\n        <>\n        <ReactMarkdown plugins={[gfm]} skipHtml={false} escapeHtml={false} astPlugins={[parseHtml]} renderers={renderers} children={markdown} />\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}