{"ast":null,"code":"module.exports = inlineCode;\ninlineCode.peek = inlineCodePeek;\n\nfunction inlineCode(node) {\n  var value = node.value || '';\n  var sequence = '`';\n  var pad = ''; // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`';\n  } // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n\n\n  if (/[^ \\r\\n]/.test(value) && (/[ \\r\\n`]/.test(value.charAt(0)) || /[ \\r\\n`]/.test(value.charAt(value.length - 1)))) {\n    pad = ' ';\n  }\n\n  return sequence + pad + value + pad + sequence;\n}\n\nfunction inlineCodePeek() {\n  return '`';\n}","map":{"version":3,"sources":["/Volumes/BackupHDD/work/react/playneko-react/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js"],"names":["module","exports","inlineCode","peek","inlineCodePeek","node","value","sequence","pad","RegExp","test","charAt","length"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,IAAX,GAAkBC,cAAlB;;AAEA,SAASF,UAAT,CAAoBG,IAApB,EAA0B;AACxB,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAL,IAAc,EAA1B;AACA,MAAIC,QAAQ,GAAG,GAAf;AACA,MAAIC,GAAG,GAAG,EAAV,CAHwB,CAKxB;AACA;AACA;;AACA,SAAO,IAAIC,MAAJ,CAAW,aAAaF,QAAb,GAAwB,UAAnC,EAA+CG,IAA/C,CAAoDJ,KAApD,CAAP,EAAmE;AACjEC,IAAAA,QAAQ,IAAI,GAAZ;AACD,GAVuB,CAYxB;AACA;;;AACA,MACE,WAAWG,IAAX,CAAgBJ,KAAhB,MACC,WAAWI,IAAX,CAAgBJ,KAAK,CAACK,MAAN,CAAa,CAAb,CAAhB,KACC,WAAWD,IAAX,CAAgBJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACM,MAAN,GAAe,CAA5B,CAAhB,CAFF,CADF,EAIE;AACAJ,IAAAA,GAAG,GAAG,GAAN;AACD;;AAED,SAAOD,QAAQ,GAAGC,GAAX,GAAiBF,KAAjB,GAAyBE,GAAzB,GAA+BD,QAAtC;AACD;;AAED,SAASH,cAAT,GAA0B;AACxB,SAAO,GAAP;AACD","sourcesContent":["module.exports = inlineCode\ninlineCode.peek = inlineCodePeek\n\nfunction inlineCode(node) {\n  var value = node.value || ''\n  var sequence = '`'\n  var pad = ''\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    (/[ \\r\\n`]/.test(value.charAt(0)) ||\n      /[ \\r\\n`]/.test(value.charAt(value.length - 1)))\n  ) {\n    pad = ' '\n  }\n\n  return sequence + pad + value + pad + sequence\n}\n\nfunction inlineCodePeek() {\n  return '`'\n}\n"]},"metadata":{},"sourceType":"script"}