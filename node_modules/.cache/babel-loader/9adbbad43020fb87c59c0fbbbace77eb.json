{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function MainPagingListModel(props) {\n  _s();\n\n  console.log(props); // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n\n  const [fetching, setFetching] = useState(false); // // 리스트 데이터 저장\n  // const [jsonData, jsonDataSet] = useState([]);\n  // // 다음 페이지 데이터를 저장\n  // // const [getPaging, setPaging] = useState<IPagingData>({ next: undefined });\n  // // 추가 리스트 취득\n  // const moreFetchData = async () => {\n  //     // 추가 데이터를 로드하는 상태로 전환\n  //     setFetching(true);\n  //     try {\n  //         const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=2');\n  //         if (response.data != null) {\n  //             console.log(response.data);\n  //             // 추가 데이터 부분\n  //             const fetchedData = response.data.list;\n  //             // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다. \n  //             const mergedData = jsonData.concat(...fetchedData);\n  //             console.log(mergedData);\n  //             jsonDataSet(mergedData);\n  //         }\n  //     } catch(e) {\n  //         console.log(e);\n  //     }\n  //     // 추가 데이터 로드 끝\n  //     setFetching(false);\n  // }\n  // // 스크롤 이벤트 핸들러\n  // const handleScroll = () => {\n  //     const scrollHeight = document.documentElement.scrollHeight;\n  //     const scrollTop = document.documentElement.scrollTop;\n  //     const clientHeight = document.documentElement.clientHeight;\n  //     if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n  //         // 페이지 끝에 도달하면 추가 데이터를 받아온다\n  //         moreFetchData();\n  //     }\n  // };\n  // useEffect(() => {\n  //     // scroll event listener 등록\n  //     window.addEventListener(\"scroll\", handleScroll);\n  //     return () => {\n  //         // scroll event listener 해제\n  //         window.removeEventListener(\"scroll\", handleScroll);\n  //     };\n  // }, []);\n}\n\n_s(MainPagingListModel, \"nCTz38YFX8DoOY4REsVR4RxybYA=\");\n\n_c = MainPagingListModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPagingListModel\");","map":{"version":3,"sources":["/Volumes/BackupHDD/work/react/playneko-react/src/model/MainPagingListModel.js"],"names":["useState","useEffect","axios","MainPagingListModel","props","console","log","fetching","setFetching"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAD+C,CAE/C;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC,CAH+C,CAI/C;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;GApDuBG,mB;;KAAAA,mB","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios'\n\nexport default function MainPagingListModel(props) {\n    console.log(props);\n    // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n    const [fetching, setFetching] = useState(false);\n    // // 리스트 데이터 저장\n    // const [jsonData, jsonDataSet] = useState([]);\n    // // 다음 페이지 데이터를 저장\n    // // const [getPaging, setPaging] = useState<IPagingData>({ next: undefined });\n\n    // // 추가 리스트 취득\n    // const moreFetchData = async () => {\n    //     // 추가 데이터를 로드하는 상태로 전환\n    //     setFetching(true);\n\n    //     try {\n    //         const response = await axios.get('https://cocoa.akibatv.net/?/api/blog_playneko_main?page=2');\n    //         if (response.data != null) {\n    //             console.log(response.data);\n    //             // 추가 데이터 부분\n    //             const fetchedData = response.data.list;\n    //             // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다. \n    //             const mergedData = jsonData.concat(...fetchedData);\n    //             console.log(mergedData);\n    //             jsonDataSet(mergedData);\n    //         }\n    //     } catch(e) {\n    //         console.log(e);\n    //     }\n\n    //     // 추가 데이터 로드 끝\n    //     setFetching(false);\n    // }\n\n    // // 스크롤 이벤트 핸들러\n    // const handleScroll = () => {\n    //     const scrollHeight = document.documentElement.scrollHeight;\n    //     const scrollTop = document.documentElement.scrollTop;\n    //     const clientHeight = document.documentElement.clientHeight;\n    //     if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n    //         // 페이지 끝에 도달하면 추가 데이터를 받아온다\n    //         moreFetchData();\n    //     }\n    // };\n\n    // useEffect(() => {\n    //     // scroll event listener 등록\n    //     window.addEventListener(\"scroll\", handleScroll);\n    //     return () => {\n    //         // scroll event listener 해제\n    //         window.removeEventListener(\"scroll\", handleScroll);\n    //     };\n    // }, []);\n}\n"]},"metadata":{},"sourceType":"module"}