{"ast":null,"code":"/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Chris Eidhof <chris@eidhof.nl>\nContributors: Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>\nWebsite: https://swift.org\nCategory: common, system\n*/\nfunction swift(hljs) {\n  var SWIFT_KEYWORDS = {\n    // override the pattern since the default of of /\\w+/ is not sufficient to\n    // capture the keywords that start with the character \"#\"\n    $pattern: /[\\w#]+/,\n    keyword: '#available #colorLiteral #column #else #elseif #endif #file ' + '#fileLiteral #function #if #imageLiteral #line #selector #sourceLocation ' + '_ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype ' + 'associativity break case catch class continue convenience default defer deinit didSet do ' + 'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' + 'get guard if import in indirect infix init inout internal is lazy left let ' + 'mutating nil none nonmutating open operator optional override postfix precedence ' + 'prefix private protocol Protocol public repeat required rethrows return ' + 'right self Self set some static struct subscript super switch throw throws true ' + 'try try! try? Type typealias unowned var weak where while willSet',\n    literal: 'true false nil',\n    built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' + 'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' + 'bridgeToObjectiveCUnconditional c compactMap contains count countElements countLeadingZeros ' + 'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' + 'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' + 'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' + 'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' + 'map max maxElement min minElement numericCast overlaps partition posix ' + 'precondition preconditionFailure print println quickSort readLine reduce reflect ' + 'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' + 'startsWith stride strideof strideofValue swap toString transcode ' + 'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' + 'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' + 'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' + 'withUnsafePointer withUnsafePointers withVaList zip'\n  };\n  var TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*',\n    relevance: 0\n  }; // slightly more special to swift\n\n  var OPTIONAL_USING_TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*[!?]'\n  };\n  var BLOCK_COMMENT = hljs.COMMENT('/\\\\*', '\\\\*/', {\n    contains: ['self']\n  });\n  var SUBST = {\n    className: 'subst',\n    begin: /\\\\\\(/,\n    end: '\\\\)',\n    keywords: SWIFT_KEYWORDS,\n    contains: [] // assigned later\n\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [{\n      begin: /\"\"\"/,\n      end: /\"\"\"/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n\n  var decimalDigits = '([0-9]_*)+';\n  var hexDigits = '([0-9a-fA-F]_*)+';\n  var NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// decimal floating-point-literal (subsumes decimal-literal)\n    {\n      begin: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n    }, // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n    {\n      begin: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n    }, // octal-literal\n    {\n      begin: /\\b0o([0-7]_*)+\\b/\n    }, // binary-literal\n    {\n      begin: /\\b0b([01]_*)+\\b/\n    }]\n  };\n  SUBST.contains = [NUMBER];\n  return {\n    name: 'Swift',\n    keywords: SWIFT_KEYWORDS,\n    contains: [STRING, hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT, OPTIONAL_USING_TYPE, TYPE, NUMBER, {\n      className: 'function',\n      beginKeywords: 'func',\n      end: /\\{/,\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: /[A-Za-z$_][0-9A-Za-z$_]*/\n      }), {\n        begin: /</,\n        end: />/\n      }, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        endsParent: true,\n        keywords: SWIFT_KEYWORDS,\n        contains: ['self', NUMBER, STRING, hljs.C_BLOCK_COMMENT_MODE, {\n          begin: ':'\n        } // relevance booster\n        ],\n        illegal: /[\"']/\n      }],\n      illegal: /\\[|%/\n    }, {\n      className: 'class',\n      beginKeywords: 'struct protocol class extension enum',\n      keywords: SWIFT_KEYWORDS,\n      end: '\\\\{',\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n      })]\n    }, {\n      className: 'meta',\n      // @attributes\n      begin: '(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|' + '@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|' + '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' + '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' + '@nonobjc|@NSApplicationMain|@UIApplicationMain|@dynamicMemberLookup|' + '@propertyWrapper|@main)\\\\b'\n    }, {\n      beginKeywords: 'import',\n      end: /$/,\n      contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT],\n      relevance: 0\n    }]\n  };\n}\n\nmodule.exports = swift;","map":{"version":3,"sources":["/Users/playneko/Desktop/workspace/playneko-react/node_modules/lowlight/node_modules/highlight.js/lib/languages/swift.js"],"names":["swift","hljs","SWIFT_KEYWORDS","$pattern","keyword","literal","built_in","TYPE","className","begin","relevance","OPTIONAL_USING_TYPE","BLOCK_COMMENT","COMMENT","contains","SUBST","end","keywords","STRING","BACKSLASH_ESCAPE","variants","decimalDigits","hexDigits","NUMBER","name","C_LINE_COMMENT_MODE","beginKeywords","excludeEnd","inherit","TITLE_MODE","endsParent","C_BLOCK_COMMENT_MODE","illegal","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Chris Eidhof <chris@eidhof.nl>\nContributors: Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n\nfunction swift(hljs) {\n  var SWIFT_KEYWORDS = {\n      // override the pattern since the default of of /\\w+/ is not sufficient to\n      // capture the keywords that start with the character \"#\"\n      $pattern: /[\\w#]+/,\n      keyword: '#available #colorLiteral #column #else #elseif #endif #file ' +\n        '#fileLiteral #function #if #imageLiteral #line #selector #sourceLocation ' +\n        '_ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype ' +\n        'associativity break case catch class continue convenience default defer deinit didSet do ' +\n        'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' +\n        'get guard if import in indirect infix init inout internal is lazy left let ' +\n        'mutating nil none nonmutating open operator optional override postfix precedence ' +\n        'prefix private protocol Protocol public repeat required rethrows return ' +\n        'right self Self set some static struct subscript super switch throw throws true ' +\n        'try try! try? Type typealias unowned var weak where while willSet',\n      literal: 'true false nil',\n      built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +\n        'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +\n        'bridgeToObjectiveCUnconditional c compactMap contains count countElements countLeadingZeros ' +\n        'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +\n        'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +\n        'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +\n        'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +\n        'map max maxElement min minElement numericCast overlaps partition posix ' +\n        'precondition preconditionFailure print println quickSort readLine reduce reflect ' +\n        'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +\n        'startsWith stride strideof strideofValue swap toString transcode ' +\n        'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +\n        'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +\n        'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +\n        'withUnsafePointer withUnsafePointers withVaList zip'\n    };\n\n  var TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*',\n    relevance: 0\n  };\n  // slightly more special to swift\n  var OPTIONAL_USING_TYPE = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\u00C0-\\u02B8\\']*[!?]'\n  };\n  var BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    {\n      contains: ['self']\n    }\n  );\n  var SUBST = {\n    className: 'subst',\n    begin: /\\\\\\(/, end: '\\\\)',\n    keywords: SWIFT_KEYWORDS,\n    contains: [] // assigned later\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {begin: /\"\"\"/, end: /\"\"\"/},\n      {begin: /\"/, end: /\"/},\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  var decimalDigits = '([0-9]_*)+';\n  var hexDigits = '([0-9a-fA-F]_*)+';\n  var NUMBER = {\n      className: 'number',\n      relevance: 0,\n      variants: [\n        // decimal floating-point-literal (subsumes decimal-literal)\n        { begin: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` +\n          `([eE][+-]?(${decimalDigits}))?\\\\b` },\n\n        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n        { begin: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` +\n          `([pP][+-]?(${decimalDigits}))?\\\\b` },\n\n        // octal-literal\n        { begin: /\\b0o([0-7]_*)+\\b/ },\n\n        // binary-literal\n        { begin: /\\b0b([01]_*)+\\b/ },\n      ]\n  };\n  SUBST.contains = [NUMBER];\n\n  return {\n    name: 'Swift',\n    keywords: SWIFT_KEYWORDS,\n    contains: [\n      STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      BLOCK_COMMENT,\n      OPTIONAL_USING_TYPE,\n      TYPE,\n      NUMBER,\n      {\n        className: 'function',\n        beginKeywords: 'func', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/\n          }),\n          {\n            begin: /</, end: />/\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/, endsParent: true,\n            keywords: SWIFT_KEYWORDS,\n            contains: [\n              'self',\n              NUMBER,\n              STRING,\n              hljs.C_BLOCK_COMMENT_MODE,\n              {begin: ':'} // relevance booster\n            ],\n            illegal: /[\"']/\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        className: 'class',\n        beginKeywords: 'struct protocol class extension enum',\n        keywords: SWIFT_KEYWORDS,\n        end: '\\\\{',\n        excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/})\n        ]\n      },\n      {\n        className: 'meta', // @attributes\n        begin: '(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|' +\n                  '@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|' +\n                  '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +\n                  '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +\n                  '@nonobjc|@NSApplicationMain|@UIApplicationMain|@dynamicMemberLookup|' +\n                  '@propertyWrapper|@main)\\\\b'\n\n      },\n      {\n        beginKeywords: 'import', end: /$/,\n        contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT],\n        relevance: 0\n      }\n    ]\n  };\n}\n\nmodule.exports = swift;\n"]},"metadata":{},"sourceType":"script"}