{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function MainListModel() {\n  _s();\n\n  // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n  const [fetching, setFetching] = useState(false); // 리스트 데이터 저장\n\n  const [jsonData, setJsonData] = useState([]); // 페이지 데이터 저장\n\n  const [pagingData, setPagingData] = useState([]);\n  var globalData = null;\n  var globalPage = 1;\n  let limitPageNum = 2; // 메인 리스트 취득\n\n  const mainFetchData = async () => {\n    try {\n      const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n\n      if (response.data != null) {\n        const fetchedData = response.data.list;\n        const pagingData = response.data.paging; // console.log(fetchedData);\n        // console.log(pagingData);\n        // console.log(mergedData);\n        // globalData = response.data.list;\n        // globalPage = globalData.length;\n\n        setJsonData(fetchedData);\n        setPagingData(pagingData);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }; // 추가 리스트 취득\n\n\n  const moreFetchData = async () => {\n    // 추가 데이터를 로드하는 상태로 전환\n    setFetching(true);\n\n    try {\n      const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n\n      if (response.data != null) {\n        // 추가 데이터 부분\n        const fetchedData = response.data.list; // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\n\n        const mergedData = globalData.concat(...fetchedData);\n        globalData = mergedData;\n        globalPage = globalData.length;\n        setJsonData(globalData);\n      }\n    } catch (e) {\n      console.log(e);\n    } // 추가 데이터 로드 끝\n\n\n    setFetching(false);\n  }; // 스크롤 이벤트 핸들러\n\n\n  const handleScroll = () => {\n    const scrollHeight = document.documentElement.scrollHeight;\n    const scrollTop = document.documentElement.scrollTop;\n    const clientHeight = document.documentElement.clientHeight;\n\n    if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n      // 페이지 끝에 도달하면 추가 데이터를 받아온다\n      moreFetchData();\n    }\n  };\n\n  useEffect(() => {\n    // 메인 리스트 가져오기\n    mainFetchData(); // scroll event listener 등록\n    // window.addEventListener(\"scroll\", handleScroll);\n    // return () => {\n    //     // scroll event listener 해제\n    //     window.removeEventListener(\"scroll\", handleScroll);\n    // };\n  }, []);\n  return {\n    list: jsonData,\n    paging: pagingData\n  };\n}\n\n_s(MainListModel, \"OATJory27RgEjOuNxaYrothURYE=\");\n\n_c = MainListModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainListModel\");","map":{"version":3,"sources":["/Users/playneko/Desktop/workspace/playneko-react/src/model/MainListModel.js"],"names":["useState","useEffect","axios","MainListModel","fetching","setFetching","jsonData","setJsonData","pagingData","setPagingData","globalData","globalPage","limitPageNum","mainFetchData","response","get","data","fetchedData","list","paging","e","console","log","moreFetchData","mergedData","concat","length","handleScroll","scrollHeight","document","documentElement","scrollTop","clientHeight"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC,CAFoC,CAGpC;;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAJoC,CAKpC;;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AAEA,MAAIU,UAAU,GAAG,IAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB,CAVoC,CAYpC;;AACA,QAAMC,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,6DAA6DJ,UAA7D,GAA0E,aAA1E,GAA0FC,YAApG,CAAvB;;AACA,UAAIE,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvB,cAAMC,WAAW,GAAGH,QAAQ,CAACE,IAAT,CAAcE,IAAlC;AACA,cAAMV,UAAU,GAAGM,QAAQ,CAACE,IAAT,CAAcG,MAAjC,CAFuB,CAGvB;AACA;AACA;AACA;AACA;;AACAZ,QAAAA,WAAW,CAACU,WAAD,CAAX;AACAR,QAAAA,aAAa,CAACD,UAAD,CAAb;AACH;AACJ,KAbD,CAaE,OAAMY,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,GAjBD,CAboC,CAgCpC;;;AACA,QAAMG,aAAa,GAAG,YAAY;AAC9B;AACAlB,IAAAA,WAAW,CAAC,IAAD,CAAX;;AAEA,QAAI;AACA,YAAMS,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,6DAA6DJ,UAA7D,GAA0E,aAA1E,GAA0FC,YAApG,CAAvB;;AACA,UAAIE,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvB;AACA,cAAMC,WAAW,GAAGH,QAAQ,CAACE,IAAT,CAAcE,IAAlC,CAFuB,CAGvB;;AACA,cAAMM,UAAU,GAAGd,UAAU,CAACe,MAAX,CAAkB,GAAGR,WAArB,CAAnB;AACAP,QAAAA,UAAU,GAAGc,UAAb;AACAb,QAAAA,UAAU,GAAGD,UAAU,CAACgB,MAAxB;AACAnB,QAAAA,WAAW,CAACG,UAAD,CAAX;AACH;AACJ,KAXD,CAWE,OAAMU,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,KAjB6B,CAmB9B;;;AACAf,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GArBD,CAjCoC,CAwDpC;;;AACA,QAAMsB,YAAY,GAAG,MAAM;AACvB,UAAMC,YAAY,GAAGC,QAAQ,CAACC,eAAT,CAAyBF,YAA9C;AACA,UAAMG,SAAS,GAAGF,QAAQ,CAACC,eAAT,CAAyBC,SAA3C;AACA,UAAMC,YAAY,GAAGH,QAAQ,CAACC,eAAT,CAAyBE,YAA9C;;AACA,QAAID,SAAS,GAAGC,YAAZ,IAA4BJ,YAA5B,IAA4CxB,QAAQ,KAAK,KAA7D,EAAoE;AAChE;AACAmB,MAAAA,aAAa;AAChB;AACJ,GARD;;AAUAtB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAY,IAAAA,aAAa,GAFD,CAGZ;AACA;AACA;AACA;AACA;AACA;AACH,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AAACK,IAAAA,IAAI,EAAEZ,QAAP;AAAiBa,IAAAA,MAAM,EAAEX;AAAzB,GAAP;AACH;;GA/EuBL,a;;KAAAA,a","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios'\n\nexport default function MainListModel() {\n    // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n    const [fetching, setFetching] = useState(false);\n    // 리스트 데이터 저장\n    const [jsonData, setJsonData] = useState([]);\n    // 페이지 데이터 저장\n    const [pagingData, setPagingData] = useState([]);\n\n    var globalData = null;\n    var globalPage = 1;\n    let limitPageNum = 2;\n\n    // 메인 리스트 취득\n    const mainFetchData = async () => {\n        try {\n            const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n            if (response.data != null) {\n                const fetchedData = response.data.list;\n                const pagingData = response.data.paging;\n                // console.log(fetchedData);\n                // console.log(pagingData);\n                // console.log(mergedData);\n                // globalData = response.data.list;\n                // globalPage = globalData.length;\n                setJsonData(fetchedData);\n                setPagingData(pagingData);\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    // 추가 리스트 취득\n    const moreFetchData = async () => {\n        // 추가 데이터를 로드하는 상태로 전환\n        setFetching(true);\n\n        try {\n            const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n            if (response.data != null) {\n                // 추가 데이터 부분\n                const fetchedData = response.data.list;\n                // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\n                const mergedData = globalData.concat(...fetchedData);\n                globalData = mergedData;\n                globalPage = globalData.length;\n                setJsonData(globalData);\n            }\n        } catch(e) {\n            console.log(e);\n        }\n\n        // 추가 데이터 로드 끝\n        setFetching(false);\n    }\n\n    // 스크롤 이벤트 핸들러\n    const handleScroll = () => {\n        const scrollHeight = document.documentElement.scrollHeight;\n        const scrollTop = document.documentElement.scrollTop;\n        const clientHeight = document.documentElement.clientHeight;\n        if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n            // 페이지 끝에 도달하면 추가 데이터를 받아온다\n            moreFetchData();\n        }\n    };\n\n    useEffect(() => {\n        // 메인 리스트 가져오기\n        mainFetchData();\n        // scroll event listener 등록\n        // window.addEventListener(\"scroll\", handleScroll);\n        // return () => {\n        //     // scroll event listener 해제\n        //     window.removeEventListener(\"scroll\", handleScroll);\n        // };\n    }, []);\n\n    return {list: jsonData, paging: pagingData};\n}\n"]},"metadata":{},"sourceType":"module"}