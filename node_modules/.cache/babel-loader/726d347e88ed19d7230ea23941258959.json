{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst MainListModel = page => {\n  _s();\n\n  // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n  // const [fetching, setFetching] = useState(false);\n  // 리스트 데이터 저장\n  const [jsonData, setJsonData] = useState([]); // 페이지 데이터 저장\n\n  const [pagingData, setPagingData] = useState([]); // var globalData = null;\n\n  var globalPage = page;\n  let limitPageNum = 8; // 메인 리스트 취득\n\n  const mainFetchData = async () => {\n    try {\n      const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n\n      if (response.data != null) {\n        const fetchedData = response.data.list;\n        const pagingData = response.data.paging; // console.log(fetchedData);\n        // console.log(pagingData);\n        // console.log(mergedData);\n        // globalData = response.data.list;\n        // globalPage = globalData.length;\n\n        setJsonData(fetchedData);\n        setPagingData(pagingData);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }; // 추가 리스트 취득\n  // const moreFetchData = async () => {\n  //     // 추가 데이터를 로드하는 상태로 전환\n  //     setFetching(true);\n  //     try {\n  //         const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n  //         if (response.data != null) {\n  //             // 추가 데이터 부분\n  //             const fetchedData = response.data.list;\n  //             // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\n  //             const mergedData = globalData.concat(...fetchedData);\n  //             globalData = mergedData;\n  //             globalPage = globalData.length;\n  //             setJsonData(globalData);\n  //         }\n  //     } catch(e) {\n  //         console.log(e);\n  //     }\n  //     // 추가 데이터 로드 끝\n  //     setFetching(false);\n  // }\n  // 스크롤 이벤트 핸들러\n  // const handleScroll = () => {\n  //     const scrollHeight = document.documentElement.scrollHeight;\n  //     const scrollTop = document.documentElement.scrollTop;\n  //     const clientHeight = document.documentElement.clientHeight;\n  //     if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n  //         // 페이지 끝에 도달하면 추가 데이터를 받아온다\n  //         moreFetchData();\n  //     }\n  // };\n\n\n  useEffect(() => {\n    // 메인 리스트 가져오기\n    mainFetchData(); // scroll event listener 등록\n    // window.addEventListener(\"scroll\", handleScroll);\n    // return () => {\n    //     // scroll event listener 해제\n    //     window.removeEventListener(\"scroll\", handleScroll);\n    // };\n  }, []);\n  return {\n    list: jsonData,\n    paging: pagingData\n  };\n};\n\n_s(MainListModel, \"7bilXv91IMzDNK0Pct2ZUiEmWuQ=\");\n\n_c = MainListModel;\nexport default MainListModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainListModel\");","map":{"version":3,"sources":["/Volumes/BackupHDD/work/react/playneko-react/src/model/MainListModel.js"],"names":["useState","useEffect","axios","MainListModel","page","jsonData","setJsonData","pagingData","setPagingData","globalPage","limitPageNum","mainFetchData","response","get","data","fetchedData","list","paging","e","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;AAAA;;AAC5B;AACA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC,CAJ4B,CAK5B;;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C,CAN4B,CAQ5B;;AACA,MAAIS,UAAU,GAAGL,IAAjB;AACA,MAAIM,YAAY,GAAG,CAAnB,CAV4B,CAY5B;;AACA,QAAMC,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,6DAA6DJ,UAA7D,GAA0E,aAA1E,GAA0FC,YAApG,CAAvB;;AACA,UAAIE,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvB,cAAMC,WAAW,GAAGH,QAAQ,CAACE,IAAT,CAAcE,IAAlC;AACA,cAAMT,UAAU,GAAGK,QAAQ,CAACE,IAAT,CAAcG,MAAjC,CAFuB,CAGvB;AACA;AACA;AACA;AACA;;AACAX,QAAAA,WAAW,CAACS,WAAD,CAAX;AACAP,QAAAA,aAAa,CAACD,UAAD,CAAb;AACH;AACJ,KAbD,CAaE,OAAMW,CAAN,EAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,GAjBD,CAb4B,CAgC5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAU,IAAAA,aAAa,GAFD,CAGZ;AACA;AACA;AACA;AACA;AACA;AACH,GATQ,EASN,EATM,CAAT;AAWA,SAAO;AAACK,IAAAA,IAAI,EAAEX,QAAP;AAAiBY,IAAAA,MAAM,EAAEV;AAAzB,GAAP;AACH,CA/ED;;GAAMJ,a;;KAAAA,a;AAiFN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios'\n\nconst MainListModel = (page) => {\n    // 추가 데이터를 로드하는지 아닌지를 담기위한 state\n    // const [fetching, setFetching] = useState(false);\n    // 리스트 데이터 저장\n    const [jsonData, setJsonData] = useState([]);\n    // 페이지 데이터 저장\n    const [pagingData, setPagingData] = useState([]);\n\n    // var globalData = null;\n    var globalPage = page;\n    let limitPageNum = 8;\n\n    // 메인 리스트 취득\n    const mainFetchData = async () => {\n        try {\n            const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n            if (response.data != null) {\n                const fetchedData = response.data.list;\n                const pagingData = response.data.paging;\n                // console.log(fetchedData);\n                // console.log(pagingData);\n                // console.log(mergedData);\n                // globalData = response.data.list;\n                // globalPage = globalData.length;\n                setJsonData(fetchedData);\n                setPagingData(pagingData);\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    // 추가 리스트 취득\n    // const moreFetchData = async () => {\n    //     // 추가 데이터를 로드하는 상태로 전환\n    //     setFetching(true);\n\n    //     try {\n    //         const response = await axios.get('https://cocoa.akibatv.net/?/api/blog/playneko/main?page=' + globalPage + '&limitpage=' + limitPageNum);\n    //         if (response.data != null) {\n    //             // 추가 데이터 부분\n    //             const fetchedData = response.data.list;\n    //             // 기존 데이터 배열과 새로 받아온 데이터 배열을 합쳐 새 배열을 만들고 state에 저장한다.\n    //             const mergedData = globalData.concat(...fetchedData);\n    //             globalData = mergedData;\n    //             globalPage = globalData.length;\n    //             setJsonData(globalData);\n    //         }\n    //     } catch(e) {\n    //         console.log(e);\n    //     }\n\n    //     // 추가 데이터 로드 끝\n    //     setFetching(false);\n    // }\n\n    // 스크롤 이벤트 핸들러\n    // const handleScroll = () => {\n    //     const scrollHeight = document.documentElement.scrollHeight;\n    //     const scrollTop = document.documentElement.scrollTop;\n    //     const clientHeight = document.documentElement.clientHeight;\n    //     if (scrollTop + clientHeight >= scrollHeight && fetching === false) {\n    //         // 페이지 끝에 도달하면 추가 데이터를 받아온다\n    //         moreFetchData();\n    //     }\n    // };\n\n    useEffect(() => {\n        // 메인 리스트 가져오기\n        mainFetchData();\n        // scroll event listener 등록\n        // window.addEventListener(\"scroll\", handleScroll);\n        // return () => {\n        //     // scroll event listener 해제\n        //     window.removeEventListener(\"scroll\", handleScroll);\n        // };\n    }, []);\n\n    return {list: jsonData, paging: pagingData};\n}\n\nexport default MainListModel;\n"]},"metadata":{},"sourceType":"module"}